package com.idemia.tec.jkt.cardiotest.service;

import com.idemia.tec.jkt.cardiotest.controller.RootLayoutController;
import com.idemia.tec.jkt.cardiotest.model.ATR;
import com.idemia.tec.jkt.cardiotest.model.TestSuite;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.smartcardio.CardException;
import javax.smartcardio.CardTerminal;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

@Service
public class RunServiceImpl implements RunService {

    static Logger logger = Logger.getLogger(RunServiceImpl.class);

    private StringBuilder optionsBuffer;
    private String scriptsDirectory;
    private int exitVal;

    @Autowired
    private RootLayoutController root;
    @Autowired
    private ScriptGeneratorService scriptGenerator;

    @Override
    public void runAll() {
        composeScripts();
        runShellCommand("pcomconsole", root.getRunSettings().getProjectPath() + "\\RunAll.pcom");
        if (exitVal == 0) {
            // parse result xml
            TestSuite runAllResult = parseRunAllXml();
            if (runAllResult != null) {
                logger.info(runAllResult.toJson());
            } else
                logger.error("Failed parsing RunAll output");
        }
        else
            logger.error("Failed to execute RunAll");
    }

    private void composeScripts() {
        optionsBuffer = new StringBuilder();
        optionsBuffer.append("; Options generated by CardIO Tool on ")
                .append(new Timestamp(System.currentTimeMillis())).append("\n\n");
        StringBuilder runAllBuffer = new StringBuilder();

        createFullStructure();

        // Run All header
        runAllBuffer.append(createRunAllHeader());

        // ATR
        if (root.getRunSettings().getAtr().isIncludeAtr())
            runAllBuffer.append(addAtr(root.getRunSettings().getAtr()));

        // TODO: Authentication

        runAllBuffer.append(endRunAll());

        // save mappings to file
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(scriptsDirectory + "Mapping.txt"))) {
            bw.append(scriptGenerator.generateMapping());
        } catch (IOException e) {
            logger.error("Failed writing mapping file");
        }

        // save options to file
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(scriptsDirectory + "Options.txt"))) {
            bw.append(optionsBuffer);
        } catch (IOException e) {
            logger.error("Failed writing options file");
        }

        // save runall to file
        try (BufferedWriter bw = new BufferedWriter(
                new FileWriter(root.getRunSettings().getProjectPath() + "\\RunAll.pcom")
        )) {
            bw.append(runAllBuffer);
        } catch (IOException e) {
//            e.printStackTrace();
            logger.error(e.getMessage());
        }
    }

    private void createFullStructure() {
        // create folder 'scripts'
        scriptsDirectory = root.getRunSettings().getProjectPath() + "\\scripts\\";
        File scriptDir = new File(scriptsDirectory);
        scriptDir.mkdir();

        // copy variable file to project directory
        File sourceVarFile = new File(root.getRunSettings().getAdvSaveVariablesPath());
        File targetVarFile = new File(root.getRunSettings().getProjectPath() + "\\variables.txt");
        try {
            Files.copy(sourceVarFile.toPath(), targetVarFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
//            e.printStackTrace();
            logger.error(e.getMessage() + " - failed copying variable file to project directory");
        }
    }

    private String createRunAllHeader() {
        return "; Generated by CardIO Tool on " + new Timestamp(System.currentTimeMillis()) + "\n\n"
                + "; EP-ID: " + root.getRunSettings().getRequestId() + "\n"
                + "; Request name: " + root.getRunSettings().getRequestName() + "\n"
                + "; Profile name: " + root.getRunSettings().getProfileName() + "\n"
                + "; Version: " + root.getRunSettings().getProfileVersion() + "\n"
                + "; Image Item ID: " + root.getRunSettings().getCardImageItemId() + "\n"
                + "; Customer: " + root.getRunSettings().getCustomer() + "\n"
                + "; Developer: " + root.getRunSettings().getDeveloperName() + "\n"
                + "; Tester: " + root.getRunSettings().getTesterName() + "\n\n"
                + ".LIBRARY_PATH /ADD logs\n"
                + ".LIBRARY_PATH /DISP\n\n";
    }

    private String endRunAll() {
        return ".LIBRARY_PATH /DEL";
    }

    private String addAtr(ATR atr) {
        // add ATR to options
        String optionAtr = "; card parameters\n"
                + ".DEFINE %ATR " + atr.getAtrString() + "\n"
                + "; TCK: " + root.getRunSettings().getAtr().getTck() + "\n\n";
        optionsBuffer.append(optionAtr);

        // add ATR script to structure
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(scriptsDirectory + "ATR.txt"))) {
            bw.append(scriptGenerator.generateAtr());
        } catch (IOException e) {
            logger.error("Failed writing ATR script");
        }

        return "; ATR\n"
                + ".EXECUTE scripts\\ATR.txt /PATH logs\n"
                + ".ALLUNDEFINE\n\n";
    }

    private TestSuite parseRunAllXml() {
        File runXml = new File(root.getRunSettings().getProjectPath()+ "\\RunAll_L00.xml");
        try {
            JAXBContext jaxbContext = JAXBContext.newInstance(TestSuite.class);
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
            return (TestSuite) unmarshaller.unmarshal(runXml);
        } catch (JAXBException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void launchProcess(List<String> cmdArray) throws IOException, InterruptedException {
        ProcessBuilder processBuilder = new ProcessBuilder(cmdArray);
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();
        exitVal = process.waitFor();
    }

    private void runShellCommand(String pcomExecutable, String scriptName) {
        String readerName = "";
        try {
            List<CardTerminal> terminals = root.getTerminalFactory().terminals().list();
            readerName = terminals.get(root.getRunSettings().getReaderNumber()).getName();
        } catch (CardException e) {
            logger.error(e.getMessage());
//            e.printStackTrace();
        }
        List<String> cmdArray = new ArrayList<>();
        cmdArray.add(pcomExecutable);
        cmdArray.add("-script");
        cmdArray.add(scriptName);
        cmdArray.add("-xmllogpath");
        cmdArray.add(".");
        cmdArray.add("-logpath");
        cmdArray.add(".");
        cmdArray.add("-reader");
        cmdArray.add(readerName);
        if (root.getRunSettings().isStopOnError())
            cmdArray.add("-stoponerror");
        try {
            launchProcess(cmdArray);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

}
